// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model contact {
  contact_id Int    @id @default(autoincrement())
  uuid       String @unique @db.VarChar
  name       String @db.VarChar(50)
  last_name  String @db.VarChar(50)
  email      String @unique @db.VarChar
  phone      String @unique @db.VarChar(10)
  user       user?  @relation("UserContact")
  codes      code[] @relation("CodeContact")
}

model user {
  user_id         Int       @id @default(autoincrement())
  uuid            String    @unique @db.VarChar
  contact_uuid    String    @unique @db.VarChar
  name            String    @db.VarChar(50)
  last_name       String    @db.VarChar(50)
  nickname        String    @unique @db.VarChar(50)
  email           String    @unique @db.VarChar
  password        String    @db.VarChar
  phone           String    @db.VarChar(10)
  phone_verified  String    @default("INACTIVE") @db.VarChar
  avatar          String?   @db.VarChar
  user_created_at DateTime  @default(now()) @db.Timestamp(6)
  user_updated_at DateTime  @default(now()) @db.Timestamp(6)
  user_deleted_at DateTime? @db.Timestamp(6)
  // status          String        @default("ACTIVE") @db.VarChar //POSIBLEMENTE TENGAS QUE HACER ESTO PARA SIMULAR UNA ELIMINACION DE USUARIO XD
  contacts        contact   @relation(fields: [contact_uuid], references: [uuid], name: "UserContact", onDelete: Cascade)
  tokens          token[]   @relation("UserTokens")
}

model token {
  token      String   @id @unique @db.VarChar
  user_uuid  String   @db.VarChar
  type       String   @db.VarChar
  created_at DateTime @default(now()) @db.Timestamp(6)
  expires_at DateTime @default(now()) @db.Timestamp(6)
  status     String   @db.VarChar
  user       user     @relation(fields: [user_uuid], references: [uuid], name: "UserTokens", onDelete: Cascade)
}

//debes de agregar una entidad codigos de verificacion seria bueno que solo tuviera 3 registros, contact_uuid, code y type = register, password, login
model code {
  id           Int      @id @default(autoincrement())
  contact_uuid String   @db.VarChar
  code         String   @db.VarChar @unique
  type         String   @db.VarChar
  created_at   DateTime @default(now()) @db.Timestamp(6)
  expires_at   DateTime @db.Timestamp(6)
  contact      contact  @relation(fields: [contact_uuid], references: [uuid], name: "CodeContact", onDelete: Cascade)
}